05_Cont_Assembly

Para as questões 2 a 5, considere que as variáveis f, g, h, i e j são do tipo inteiro (16 bits na arquitetura do MSP430), e que o vetor A[] é do tipo inteiro. Estas variáveis estão armazenadas nos seguintes registradores: f: R4 g: R5 h: R6 i: R7 j: R8 A: R9 Utilize os registradores R11, R12, R13, R14 e R15 para armazenar valores temporários.

1. Escreva os trechos de código assembly do MSP430 para: (a) Somente setar o bit menos significativo de R5. (b) Somente setar dois bits de R6: o menos significativo e o segundo menos significativo. (c) Somente zerar o terceiro bit menos significativo de R7. (d) Somente zerar o terceiro e o quarto bits menos significativo de R8. (e) Somente inverter o bit mais significativo de R9. (f) Inverter o nibble mais significativo de R10, e setar o nibble menos significativo de R10.


a.	 
bis.b #1 , R5

b.	 
bis.w #3 , R6

c.	 
bic.w #4, R7

d.	 
bic.w #8, R8

e.	 
inv.b 16(R9)

f.	 
xor.w #61440, R10
bis #11, R10


2. "Traduza" o seguinte trecho de código em C para o assembly do MSP430:
if(i>j) f = g+h+10;
else f = g-h-10;

cmp R7, R8  
jge if_rotine

sub.w R6, R5
sub.w #10, R5
mov R5, R4

If_rotine:
add.w R6, R5
add.w #10, R5
mov R5, R4

3. "Traduza" o seguinte trecho de código em C para o assembly do MSP430:
while(save[i]!=k) i++;



while:   mov R7, R15     ; R15 = i
rla R15
add R14, R15    ; i = R14 + 2*i = save[i]
cmp R13, 0(R15)
jeq exit
inc.w R7
jmp while
exit:
	…

4. "Traduza" o seguinte trecho de código em C para o assembly do MSP430:
for(i=0; i<100; i++) A[i] = i*2;
clr.w R7
FOR:	cmp.w R7, #100
jge END 
mov.w R7, R14
rla.w R14
add.w R14, R9
mov.w R14, 0(R9)
inc.w R7
jmp FOR

 
END:
…

5. "Traduza" o seguinte trecho de código em C para o assembly do MSP430:
for(i=99; i>=0; i--) A[i] = i*2;

mov.w #99, R7
FOR:	cmp.w R7, #0
jl END 
mov.w R7, R14
rla.w R14
add.w R14, R9
mov.w R14, 0(R9)
dec.w R7
jmp FOR
END: …

