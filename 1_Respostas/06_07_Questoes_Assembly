06_07_Questoes_Assembly

Para cada questão, escreva funções em C e/ou sub-rotinas na linguagem Assembly do MSP430. Reaproveite funções e sub-rotinas de uma questão em outra, se assim desejar. Leve em consideração que as sub-rotinas são utilizadas em um código maior, portanto utilize adequadamente os registradores R4 a R11. As instruções da linguagem Assembly do MSP430 se encontram ao final deste texto.
1.	(a) Escreva uma função em C que calcule a raiz quadrada x de uma variável S do tipo float, utilizando o seguinte algoritmo: após n+1 iterações, a raiz quadrada de S é dada por
x(n+1) = (x(n) + S/x(n))/2
O protótipo da função é:
unsigned int Raiz_Quadrada(unsigned int S);
#include <stdio.h>
#define MAX 100

unsigned int Raiz_Quadrada(unsigned int S)
{	int n;
	unsigned int x;
	x = 1;
	for(n=0; n<MAX; n++)
		x = ((x + (S/x))/2);	
	return x;}
void main (){
	unsigned int S;
	unsigned int x;
	S = 1024;
	x = Raiz_Quadrada(S);
	return 0;}






(b) Escreva a sub-rotina equivalente na linguagem Assembly do MSP430. A variável S é fornecida pelo registrador R15, e a raiz quadrada de S (ou seja, a variável x) é fornecida pelo registrador R15 também.
MAIN:		mov.w #4, R15		

SQUARE:	mov.w R15, R4
	mov.w #1, R15
	mov.w #0, R5
	mov.w #3, R6

FOR:		cmp.w R5, R6
		jl END
		jz END

MATH:	clr.w R8
		mov R4, R7
	call DIVISION
add.w R8, R15
rra.w R15
	inc.w R5
	jmp FOR

DIVISION:	cmp R15, R7 ; 
jge CONTINUE
ret

CONTINUE:	sub R15, R7
inc R8
jmp DIVISION
END: ...
1.	(a) Escreva uma função em C que calcule x elevado à N-ésima potência, seguindo o seguinte protótipo:
int Potencia(int x, int N);
#include <stdio.h>

int Potencia(int x, int N)
{  int P;
    P = x;
    while((N-1) > 0)
    {  P = P * x;
        N--; }
    return P;}

int main()
{ int N, x, result;
    N = 5;
    x = 2;
    
    result = Potencia(x, N);

    return 0;}

(b) Escreva a sub-rotina equivalente na linguagem Assembly do MSP430. x e n são fornecidos através dos registradores R15 e R14, respectivamente, e a saída deverá ser fornecida no registrador R15.

call Potencia

Potencia:	mov.w #3, R15
mov.w #3, R14
push.w R5
push.w R4
push.w R3
push.w R2
mov.w R14, R4
mov.w R15, R3
clr.w  R2
sub.w R15, R2 
inc.w R4

WHILE: 	mov.w R15, R5
dec.w R5
dec.w R4
add R3, R2
mov.w R15, R3
cmp R4, #0
jl LOOP

mov.w R2, R15
pop.w R2
pop.w R3
pop.w R4
pop.w R5
ret

LOOP:	cmp R5, #0
jge WHILE
add.w R15, R3
dec.w R5
jmp LOOP








1.	Escreva uma sub-rotina na linguagem Assembly do MSP430 que calcula a divisão de a por b, onde a, b e o valor de saída são inteiros de 16 bits. a e b são fornecidos através dos registradores R15 e R14, respectivamente, e a saída deverá ser fornecida através do registrador R15.
		

DIVISION:	push.w R4
		clr.w R4
	mov.w #48, R15
		mov.w #6, R14

LOOP:	cmp R14, R15
jge CONTINUE
mov.w R4, R15
pop.w R4
ret

CONTINUE:	sub.w R14, R15
inc.w R4
jmp LOOP

call DIVISION

2.	Escreva uma sub-rotina na linguagem Assembly do MSP430 que calcula o resto da divisão de a por b, onde a, b e o valor de saída são inteiros de 16 bits. a e b são fornecidos através dos registradores R15 e R14, respectivamente, e a saída deverá ser fornecida através do registrador R15.
DIVISION:	push.w R4
		clr.w R4
	mov.w #48, R15
		mov.w #6, R14

LOOP:	cmp R14, R15
jge CONTINUE
pop.w R4
ret

CONTINUE:	sub.w R14, R15
inc.w R4
jmp LOOP

call DIVISION
3.	(a) Escreva uma função em C que indica a primalidade de uma variável inteira sem sinal, retornando o valor 1 se o número for primo, e 0, caso contrário. Siga o seguinte protótipo:
int Primalidade(unsigned int x);
#include <stdio.h>

int Primalidade(unsigned int x)
{
    unsigned int half;
    int i;
    
    if((x==0) | (x==1))
    return 1;
    
    if ((x%2) != 0)
    {
        half = x/2;
        for(i=2;i<=half;i++)
        {
            if(x%i == 0)
            return 0;
        }
        return 1;
    }    
    else
        return 0;
    
}

void main ()
{
    unsigned int num, prim;
    
    num = 0;
    
    prim = Primalidade(num);
    if(prim == 1)
        printf("O numero %d é primo", num);
        
    else
        printf("O numero %d não é primo", num);

}

(b) Escreva a sub-rotina equivalente na linguagem Assembly do MSP430. A variável de entrada é fornecida pelo registrador R15, e o valor de saída também.
PRIMALIDADE:  mov.w #7, R15;
                mov.w R15, R14;
                cmp #0, R15;
                jne TEST_1;
                mov.w #1, R15;
                ret;
                
TEST_1:            cmp #1, R15;
                jne TEST_2;
                mov.w #1, R15;
                ret;
                
TEST_2:       	     rra.w R14;
                jc TEST_3;
                clr R15;
                ret;
                
TEST_3:           mov R15, R13;
    mov.w #2, R11;
LOOP_2:           cmp R11, R14;
                jl END; 
                call DIVISION;
                inc.w R11
                cmp R14, 0;
                jne LOOP_2
                clr R15
                ret
                
                
DIVISION:	clr.w R12 ; R13 = x, R14 = y => x/y

LOOP:   	cmp R14, R13
                     jge CONTINUE
                     ret

CONTINUE:	sub.w R14, R13
                	inc.w R12
                	jmp LOOP
                
                
END:            mov.w #1, R15
               	ret  

1.	Escreva uma função em C que calcula o duplo fatorial de n, representado por n!!. Se n for ímpar, n!! = 135*...n, e se n for par, n!! = 246...n. Por exemplo, 9!! = 13579 = 945 e 10!! = 2468*10 = 3840. Além disso, 0!! = 1!! = 1. O protótipo da função é:
unsigned long long DuploFatorial(unsigned long long n);

1.	(a) Escreva uma função em C que calcula a função exponencial utilizando a série de Taylor da mesma. Considere o cálculo até o termo n = 20. O protótipo da função é double ExpTaylor(double x); (b) Escreva a sub-rotina equivalente na linguagem Assembly do MSP430, mas considere que os valores de entrada e de saída são inteiros de 16 bits. A variável de entrada é fornecida pelo registrador R15, e o valor de saída também.

2.	Escreva uma sub-rotina na linguagem Assembly do MSP430 que indica se um vetor esta ordenado de forma decrescente. Por exemplo: [5 4 3 2 1] e [90 23 20 10] estão ordenados de forma decrescente. [1 2 3 4 5] e [1 2 3 2] não estão. O primeiro endereço do vetor é fornecido pelo registrador R15, e o tamanho do vetor é fornecido pelo registrador R14. A saída deverá ser fornecida no registrador R15, valendo 1 quando o vetor estiver ordenado de forma decrescente, e valendo 0 em caso contrário.

3.	Escreva uma sub-rotina na linguagem Assembly do MSP430 que calcula o produto escalar de dois vetores, a e b. O primeiro endereço do vetor a deverá ser passado através do registrador R15, o primeiro endereço do vetor b deverá ser passado através do registrador R14, e o tamanho do vetor deverá ser passado pelo registrador R13. A saída deverá ser fornecida no registrador R15.
Em c:

#include <stdio.h>

int main ()
{
    int pe;
    int a[3], b[3], c = 3;
    
    a[0] = 1;
    a[1] = 2;
    a[2] = 3;
    
    b[0] = 1;
    b[1] = 2;
    b[2] = 3;

  pe = produto_escalar(&a, &b, c);	// a = Vetor 1, b = Vetor 2, c = Tamanho dos vetores
  printf("%d", pe);
}


int produto_escalar (int *a, int *b, int c)
{
    int i, r = 0;
    for (i = 0; i < c; i++)
        r = r + (a[i] * b[i]);
    return r;
}


Em Assembly:

4.	(a) Escreva uma função em C que indica se um vetor é palíndromo. Por exemplo: [1 2 3 2 1] e [0 10 20 20 10 0] são palíndromos. [5 4 3 2 1] e [1 2 3 2] não são. Se o vetor for palíndromo, retorne o valor 1. Caso contrário, retorne o valor 0. O protótipo da função é:
int Palindromo(int vetor[ ], int tamanho);
(b) Escreva a sub-rotina equivalente na linguagem Assembly do MSP430. O endereço do vetor de entrada é dado pelo registrador R15, o tamanho do vetor é dado pelo registrador R14, e o resultado é dado pelo registrador R15.

